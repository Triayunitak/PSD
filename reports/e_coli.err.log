Traceback (most recent call last):
  File "C:\Users\Fujitsu\AppData\Local\Programs\Python\Python312\Lib\site-packages\jupyter_core\utils\__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Fujitsu\AppData\Local\Programs\Python\Python312\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\Users\Fujitsu\AppData\Local\Programs\Python\Python312\Lib\site-packages\nbclient\client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Fujitsu\AppData\Local\Programs\Python\Python312\Lib\site-packages\jupyter_core\utils\__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Fujitsu\AppData\Local\Programs\Python\Python312\Lib\asyncio\base_events.py", line 687, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "C:\Users\Fujitsu\AppData\Local\Programs\Python\Python312\Lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "C:\Users\Fujitsu\AppData\Local\Programs\Python\Python312\Lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\Fujitsu\AppData\Local\Programs\Python\Python312\Lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
from sklearn.preprocessing import LabelEncoder
from sqlalchemy import create_engine
from imblearn.over_sampling import SMOTE
import numpy as np

# === KONEKSI KE MYSQL ===
engine = create_engine("mysql+pymysql://root:@localhost/ecoli")

# === AMBIL DATA ===
df = pd.read_sql("SELECT * FROM ecoli", engine)

# tampilkan 5 baris pertama
print(df.head())

# === PISAHKAN FITUR DAN LABEL ===
X = df[["feature1","feature2","feature3","feature4","feature5","feature6","feature7"]].values
y_raw = df["class_label"].values

# encode label
le = LabelEncoder()
y = le.fit_transform(y_raw)
target_names = le.classes_

# === PCA DATA ASLI ===
pca = PCA(n_components=2)
X_r = pca.fit(X).transform(X)

# === PLOT DATA ASLI ===
plt.figure(figsize=(7,5))
colors = ["navy","turquoise","darkorange","green","red","purple","brown","gray"]
for color, i, target_name in zip(colors, range(len(target_names)), target_names):
    plt.scatter(X_r[y == i, 0], X_r[y == i, 1], color=color, alpha=0.8, label=target_name)

plt.legend(loc="best")
plt.title("PCA of Original Ecoli dataset")
plt.show()

unique, counts = np.unique(y, return_counts=True)
print("Distribusi kelas sebelum balancing:", dict(zip(le.classes_, counts)))

# === SMOTE untuk penyeimbangan data ===
smote = SMOTE(random_state=42, k_neighbors=1)
X_res, y_res = smote.fit_resample(X, y)

print("Jumlah sampel sebelum balancing:", len(y))
print("Jumlah sampel sesudah balancing:", len(y_res))

# identifikasi mana data synthetic
n_original = len(X)
is_synthetic = np.array([False]*n_original + [True]*(len(X_res)-n_original))

# === PCA DATA BALANCED ===
X_r_bal = pca.fit(X_res).transform(X_res)

# === PLOT DATA BALANCED ===
plt.figure(figsize=(7,5))
for color, i, target_name in zip(colors, range(len(target_names)), target_names):
    # titik asli
    plt.scatter(
        X_r_bal[(y_res == i) & (is_synthetic == False), 0],
        X_r_bal[(y_res == i) & (is_synthetic == False), 1],
        color=color, alpha=0.6, label=f"{target_name} (original)"
    )
    # titik synthetic
    plt.scatter(
        X_r_bal[(y_res == i) & (is_synthetic == True), 0],
        X_r_bal[(y_res == i) & (is_synthetic == True), 1],
        color=color, alpha=0.6, marker="x", label=f"{target_name} (synthetic)"
    )

plt.legend(loc="best", fontsize=8)
plt.title("PCA of Balanced Ecoli dataset (SMOTE)")
plt.show()

------------------


[31m---------------------------------------------------------------------------[39m
[31mModuleNotFoundError[39m                       Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[1][39m[32m, line 10[39m
[32m      7[39m [38;5;28;01mimport[39;00m[38;5;250m [39m[34;01mnumpy[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[34;01mnp[39;00m
[32m      9[39m [38;5;66;03m# === KONEKSI KE MYSQL ===[39;00m
[32m---> [39m[32m10[39m engine = [43mcreate_engine[49m[43m([49m[33;43m"[39;49m[33;43mmysql+pymysql://root:@localhost/ecoli[39;49m[33;43m"[39;49m[43m)[49m
[32m     12[39m [38;5;66;03m# === AMBIL DATA ===[39;00m
[32m     13[39m df = pd.read_sql([33m"[39m[33mSELECT * FROM ecoli[39m[33m"[39m, engine)

[36mFile [39m[32m<string>:2[39m, in [36mcreate_engine[39m[34m(url, **kwargs)[39m

[36mFile [39m[32m~\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\util\deprecations.py:281[39m, in [36mdeprecated_params.<locals>.decorate.<locals>.warned[39m[34m(fn, *args, **kwargs)[39m
[32m    274[39m     [38;5;28;01mif[39;00m m [38;5;129;01min[39;00m kwargs:
[32m    275[39m         _warn_with_version(
[32m    276[39m             messages[m],
[32m    277[39m             versions[m],
[32m    278[39m             version_warnings[m],
[32m    279[39m             stacklevel=[32m3[39m,
[32m    280[39m         )
[32m--> [39m[32m281[39m [38;5;28;01mreturn[39;00m [43mfn[49m[43m([49m[43m*[49m[43margs[49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[43mkwargs[49m[43m)[49m

[36mFile [39m[32m~\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\engine\create.py:617[39m, in [36mcreate_engine[39m[34m(url, **kwargs)[39m
[32m    615[39m         [38;5;28;01mif[39;00m k [38;5;129;01min[39;00m kwargs:
[32m    616[39m             dbapi_args[k] = pop_kwarg(k)
[32m--> [39m[32m617[39m     dbapi = [43mdbapi_meth[49m[43m([49m[43m*[49m[43m*[49m[43mdbapi_args[49m[43m)[49m
[32m    619[39m dialect_args[[33m"[39m[33mdbapi[39m[33m"[39m] = dbapi
[32m    621[39m dialect_args.setdefault([33m"[39m[33mcompiler_linting[39m[33m"[39m, compiler.NO_LINTING)

[36mFile [39m[32m~\AppData\Local\Programs\Python\Python312\Lib\site-packages\sqlalchemy\dialects\mysql\pymysql.py:89[39m, in [36mMySQLDialect_pymysql.import_dbapi[39m[34m(cls)[39m
[32m     87[39m [38;5;129m@classmethod[39m
[32m     88[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34mimport_dbapi[39m([38;5;28mcls[39m) -> DBAPIModule:
[32m---> [39m[32m89[39m     [38;5;28;01mreturn[39;00m [38;5;28;43m__import__[39;49m[43m([49m[33;43m"[39;49m[33;43mpymysql[39;49m[33;43m"[39;49m[43m)[49m

[31mModuleNotFoundError[39m: No module named 'pymysql'

